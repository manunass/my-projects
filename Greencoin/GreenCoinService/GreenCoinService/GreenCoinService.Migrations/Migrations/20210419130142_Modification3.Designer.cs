// <auto-generated />
using GreenCoinService.Migrations;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GreenCoinService.Migrations.Migrations
{
    [DbContext(typeof(GreenCoinServiceDbContext))]
    [Migration("20210419130142_Modification3")]
    partial class Modification3
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GreenCoinService.DataContracts.Entities.AddressEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AreaOrStreet")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Building")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BusinessId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Flat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("MunicipalityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId")
                        .IsUnique()
                        .HasFilter("[BusinessId] IS NOT NULL");

                    b.HasIndex("MunicipalityId")
                        .IsUnique()
                        .HasFilter("[MunicipalityId] IS NOT NULL");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("GreenCoinService.DataContracts.Entities.BagScanEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BatchId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Processed")
                        .HasColumnType("bit");

                    b.Property<string>("Quality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UnixTimeProcessed")
                        .HasColumnType("bigint");

                    b.Property<long>("UnixTimeScanned")
                        .HasColumnType("bigint");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("BatchId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("Processed");

                    b.HasIndex("UserId");

                    b.ToTable("BagScans");
                });

            modelBuilder.Entity("GreenCoinService.DataContracts.Entities.BatchEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("BatchNumber")
                        .HasColumnType("int");

                    b.Property<bool>("Current")
                        .HasColumnType("bit");

                    b.Property<string>("MunicipalityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RecyclableId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("Revenue")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("Current");

                    b.HasIndex("MunicipalityId");

                    b.HasIndex("RecyclableId");

                    b.ToTable("Batches");
                });

            modelBuilder.Entity("GreenCoinService.DataContracts.Entities.BusinessEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("About")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirebaseUid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<string>("MunicipalityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerFirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerLastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("FirebaseUid")
                        .IsUnique()
                        .HasFilter("[FirebaseUid] IS NOT NULL");

                    b.HasIndex("MunicipalityId");

                    b.HasIndex("PhoneNumber")
                        .IsUnique()
                        .HasFilter("[PhoneNumber] IS NOT NULL");

                    b.ToTable("Businesses");
                });

            modelBuilder.Entity("GreenCoinService.DataContracts.Entities.CodeEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BusinessId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RecyclableId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.HasIndex("RecyclableId");

                    b.HasIndex("UserId");

                    b.ToTable("Codes");
                });

            modelBuilder.Entity("GreenCoinService.DataContracts.Entities.EmployeeEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirebaseUid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MunicipalityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FirebaseUid")
                        .IsUnique()
                        .HasFilter("[FirebaseUid] IS NOT NULL");

                    b.HasIndex("MunicipalityId");

                    b.HasIndex("PhoneNumber")
                        .IsUnique()
                        .HasFilter("[PhoneNumber] IS NOT NULL");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("GreenCoinService.DataContracts.Entities.MunicipalityEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CoinsCashoutTreshold")
                        .HasColumnType("int");

                    b.Property<int>("CoinsInCirculation")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("LbpCoinRatio")
                        .HasColumnType("real");

                    b.Property<string>("MohafazaName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MunicipalityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QazaName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Municipalities");
                });

            modelBuilder.Entity("GreenCoinService.DataContracts.Entities.RecyclableEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("LbpPerKg")
                        .HasColumnType("real");

                    b.Property<string>("Material")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Recyclables");
                });

            modelBuilder.Entity("GreenCoinService.DataContracts.Entities.RequestEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BusinessId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UnixTimeApproved")
                        .HasColumnType("bigint");

                    b.Property<long>("UnixTimeCompleted")
                        .HasColumnType("bigint");

                    b.Property<long>("UnixTimeRequested")
                        .HasColumnType("bigint");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.HasIndex("UserId");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("GreenCoinService.DataContracts.Entities.TransactionEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<string>("BagScanId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PostAmount")
                        .HasColumnType("int");

                    b.Property<int>("PreAmount")
                        .HasColumnType("int");

                    b.Property<string>("TransferId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UnixTime")
                        .HasColumnType("bigint");

                    b.Property<string>("WalletId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BagScanId")
                        .IsUnique()
                        .HasFilter("[BagScanId] IS NOT NULL");

                    b.HasIndex("WalletId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("GreenCoinService.DataContracts.Entities.UserEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirebaseUid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MunicipalityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("FirebaseUid")
                        .IsUnique()
                        .HasFilter("[FirebaseUid] IS NOT NULL");

                    b.HasIndex("MunicipalityId");

                    b.HasIndex("PhoneNumber")
                        .IsUnique()
                        .HasFilter("[PhoneNumber] IS NOT NULL");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("GreenCoinService.DataContracts.Entities.WalletEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Balance")
                        .HasColumnType("int");

                    b.Property<string>("BusinessId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId")
                        .IsUnique()
                        .HasFilter("[BusinessId] IS NOT NULL");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Wallets");
                });

            modelBuilder.Entity("GreenCoinService.DataContracts.Entities.AddressEntity", b =>
                {
                    b.HasOne("GreenCoinService.DataContracts.Entities.BusinessEntity", "Business")
                        .WithOne("Address")
                        .HasForeignKey("GreenCoinService.DataContracts.Entities.AddressEntity", "BusinessId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.HasOne("GreenCoinService.DataContracts.Entities.MunicipalityEntity", "Municipality")
                        .WithOne("Address")
                        .HasForeignKey("GreenCoinService.DataContracts.Entities.AddressEntity", "MunicipalityId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.HasOne("GreenCoinService.DataContracts.Entities.UserEntity", "User")
                        .WithOne("Address")
                        .HasForeignKey("GreenCoinService.DataContracts.Entities.AddressEntity", "UserId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.Navigation("Business");

                    b.Navigation("Municipality");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GreenCoinService.DataContracts.Entities.BagScanEntity", b =>
                {
                    b.HasOne("GreenCoinService.DataContracts.Entities.BatchEntity", "Batch")
                        .WithMany("BagScans")
                        .HasForeignKey("BatchId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.HasOne("GreenCoinService.DataContracts.Entities.EmployeeEntity", "Employee")
                        .WithMany("BagScans")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("GreenCoinService.DataContracts.Entities.UserEntity", "User")
                        .WithMany("BagScans")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.Navigation("Batch");

                    b.Navigation("Employee");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GreenCoinService.DataContracts.Entities.BatchEntity", b =>
                {
                    b.HasOne("GreenCoinService.DataContracts.Entities.MunicipalityEntity", "Municipality")
                        .WithMany("Batches")
                        .HasForeignKey("MunicipalityId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.HasOne("GreenCoinService.DataContracts.Entities.RecyclableEntity", "Recyclable")
                        .WithMany("Batches")
                        .HasForeignKey("RecyclableId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Municipality");

                    b.Navigation("Recyclable");
                });

            modelBuilder.Entity("GreenCoinService.DataContracts.Entities.BusinessEntity", b =>
                {
                    b.HasOne("GreenCoinService.DataContracts.Entities.MunicipalityEntity", "Municipality")
                        .WithMany("Businesses")
                        .HasForeignKey("MunicipalityId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.Navigation("Municipality");
                });

            modelBuilder.Entity("GreenCoinService.DataContracts.Entities.CodeEntity", b =>
                {
                    b.HasOne("GreenCoinService.DataContracts.Entities.BusinessEntity", "Business")
                        .WithMany("Codes")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.HasOne("GreenCoinService.DataContracts.Entities.RecyclableEntity", "Recyclable")
                        .WithMany("Codes")
                        .HasForeignKey("RecyclableId");

                    b.HasOne("GreenCoinService.DataContracts.Entities.UserEntity", "User")
                        .WithMany("Codes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.Navigation("Business");

                    b.Navigation("Recyclable");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GreenCoinService.DataContracts.Entities.EmployeeEntity", b =>
                {
                    b.HasOne("GreenCoinService.DataContracts.Entities.MunicipalityEntity", "Municipality")
                        .WithMany("Employees")
                        .HasForeignKey("MunicipalityId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.Navigation("Municipality");
                });

            modelBuilder.Entity("GreenCoinService.DataContracts.Entities.RequestEntity", b =>
                {
                    b.HasOne("GreenCoinService.DataContracts.Entities.BusinessEntity", "Business")
                        .WithMany("Requests")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.HasOne("GreenCoinService.DataContracts.Entities.UserEntity", "User")
                        .WithMany("Requests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.Navigation("Business");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GreenCoinService.DataContracts.Entities.TransactionEntity", b =>
                {
                    b.HasOne("GreenCoinService.DataContracts.Entities.BagScanEntity", "BagScan")
                        .WithOne("Transaction")
                        .HasForeignKey("GreenCoinService.DataContracts.Entities.TransactionEntity", "BagScanId");

                    b.HasOne("GreenCoinService.DataContracts.Entities.WalletEntity", "Wallet")
                        .WithMany("Transactions")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.Navigation("BagScan");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("GreenCoinService.DataContracts.Entities.UserEntity", b =>
                {
                    b.HasOne("GreenCoinService.DataContracts.Entities.MunicipalityEntity", "Municipality")
                        .WithMany("Users")
                        .HasForeignKey("MunicipalityId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.Navigation("Municipality");
                });

            modelBuilder.Entity("GreenCoinService.DataContracts.Entities.WalletEntity", b =>
                {
                    b.HasOne("GreenCoinService.DataContracts.Entities.BusinessEntity", "Business")
                        .WithOne("Wallet")
                        .HasForeignKey("GreenCoinService.DataContracts.Entities.WalletEntity", "BusinessId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.HasOne("GreenCoinService.DataContracts.Entities.UserEntity", "User")
                        .WithOne("Wallet")
                        .HasForeignKey("GreenCoinService.DataContracts.Entities.WalletEntity", "UserId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.Navigation("Business");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GreenCoinService.DataContracts.Entities.BagScanEntity", b =>
                {
                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("GreenCoinService.DataContracts.Entities.BatchEntity", b =>
                {
                    b.Navigation("BagScans");
                });

            modelBuilder.Entity("GreenCoinService.DataContracts.Entities.BusinessEntity", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("Codes");

                    b.Navigation("Requests");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("GreenCoinService.DataContracts.Entities.EmployeeEntity", b =>
                {
                    b.Navigation("BagScans");
                });

            modelBuilder.Entity("GreenCoinService.DataContracts.Entities.MunicipalityEntity", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("Batches");

                    b.Navigation("Businesses");

                    b.Navigation("Employees");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("GreenCoinService.DataContracts.Entities.RecyclableEntity", b =>
                {
                    b.Navigation("Batches");

                    b.Navigation("Codes");
                });

            modelBuilder.Entity("GreenCoinService.DataContracts.Entities.UserEntity", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("BagScans");

                    b.Navigation("Codes");

                    b.Navigation("Requests");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("GreenCoinService.DataContracts.Entities.WalletEntity", b =>
                {
                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
